// üìÅ stores/timetableStore.js --------------------------------------------------
// Pinia Ïä§ÌÜ†Ïñ¥ Î¶¨Ìå©ÌÑ∞ÎßÅ Î≤ÑÏ†Ñ
//   1. fetchTimetableWithEvents Ìò∏Ï∂ú Ïãú type='regular' Î°ú ÏßÄÏ†ï ‚Üí Ï†ïÍ∑ú ÏàòÏóÖÎßå Î∞õÏïÑÏò¥
//   2. Ìú¥Í∞ï(cancel)¬∑Î≥¥Í∞ï(makeup)¬∑ÌñâÏÇ¨(event) Î∂ÑÎ•ò Î°úÏßÅ Í∞úÏÑ†
//   3. Í≥µÌú¥Ïùº ÏùëÎãµ(Î¨∏ÏûêÏó¥ Î∞∞Ïó¥) ‚Üí Í∞ùÏ≤¥ Î≥ÄÌôò ÏãúÌÇ§Îäî util ÏàòÏ†ï
//   4. ÌäπÍ∞ï(special lecture) Í∑∏Î£π(Ï†ÑÏ≤¥/Î∂ÑÎ∞ò) ÌïÑÌÑ∞Î•º actionsÏóêÏÑú Ï≤òÎ¶¨
//   5. combinedData ‚Üí PRIORITY Î∞∞Ïó¥Î°ú Ïö∞ÏÑ†ÏàúÏúÑ Ï†ïÎ†¨(holiday > event > makeup > special > regular)
// ---------------------------------------------------------------------------

import { defineStore } from 'pinia'
import dayjs from 'dayjs'
import utc from 'dayjs/plugin/utc'
import timezone from 'dayjs/plugin/timezone'

import {
    fetchTimetableWithEvents,
    fetchSpecialLectures
} from '@/services/timetableService'

import { getSemesterRange } from '@/utils/semester'
import { normalizeLevel } from '@/utils/level'
import { inferDateFromOriginalClass } from '@/utils/date'

dayjs.extend(utc)
dayjs.extend(timezone)

// util ----------------------------------------------------------------------
const DAYS_KO = ['Ïùº', 'Ïõî', 'Ìôî', 'Ïàò', 'Î™©', 'Í∏à', 'ÌÜ†']
const PRIORITY = ['holiday', 'cancel', 'makeup', 'short_lecture', 'special', 'event', 'regular'];

function getDayFromDate(dateStr) {
    const date = dayjs.utc(dateStr).tz('Asia/Seoul')
    return DAYS_KO[date.day()]
}

function toHolidayObj(dateStr) {
    return {
        event_type: 'holiday',
        day: getDayFromDate(dateStr),
        date: dateStr,
        start_period: 1,
        end_period: 9,
        subject_name: 'Í≥µÌú¥Ïùº',
        description: 'Í≥µÌú¥Ïùº',
        professor_name: '',
        room: ''
    }
}

export const useTimetableStore = defineStore('timetable', {
    state: () => ({
        regulars: [],   // Ï†ïÍ∑ú ÏàòÏóÖ
        specials: [],   // ÌäπÍ∞ï
        cancels: [],    // Ìú¥Í∞ï
        makeups: [],    // Î≥¥Í∞ï
        events: [],     // Ïù¥Î≤§Ìä∏
        holidays: [],   // Í≥µÌú¥Ïùº
        filters: {
            year: 1,
            semester: 'spring',
            level: null,
            groupLevel: null
        },
        dateRange: {
            start: dayjs().startOf('week').format('YYYY-MM-DD'),
            end: dayjs().startOf('week').add(6, 'day').format('YYYY-MM-DD')
        }
    }),

    getters: {
        /**
         * üéØ ÌïòÎÇòÏùò Î∞∞Ïó¥Î°ú Î≥ëÌï© + PRIORITY Ï†ïÎ†¨
         *   - holiday(0) > cancel(1) > makeup(2) > special(3) > event(4) > regular(5)
         */
        combinedData(state) {
            console.log('üìä Store Îç∞Ïù¥ÌÑ∞ ÌòÑÌô© (Î≥ëÌï© Ï†Ñ):', {
                regulars: state.regulars.length,
                cancels: state.cancels.length,
                makeups: state.makeups.length,
                events: state.events.length,
                specials: state.specials.length,
                holidays: state.holidays.length
            });

            const merged = [
                ...state.holidays.map(h => ({ ...h, priority: 0 })),
                ...state.cancels.map(c => ({ ...c, priority: 1 })),
                ...state.makeups.map(m => ({ ...m, priority: 2 })),
                ...state.specials.map(s => ({ ...s, priority: 3 })),
                ...state.events.map(e => ({ ...e, priority: 4 })),
                ...state.regulars.map(r => ({ ...r, priority: 5 }))
            ];

            // Ï†ïÎ†¨: Í∞ôÏùÄ ÏãúÍ∞ÑÎåÄÏóêÎäî priority ÏàúÏúºÎ°ú
            const sorted = merged.sort((a, b) => {
                const dateA = a.date || ''
                const dateB = b.date || ''
                const periodA = a.start_period ?? 1
                const periodB = b.start_period ?? 1
                const priorityA = a.priority ?? 99
                const priorityB = b.priority ?? 99

                if (dateA === dateB) {
                    if (periodA === periodB) {
                        return priorityA - priorityB
                    }
                    return periodA - periodB
                }
                return dateA.localeCompare(dateB)
            })

            console.log('üìä Î≥ëÌï© Í≤∞Í≥º:', {
                total: sorted.length,
                byType: sorted.reduce((acc, item) => {
                    acc[item.event_type] = (acc[item.event_type] || 0) + 1;
                    return acc;
                }, {})
            });

            return sorted;
        }
    },

    actions: {
        setFilters(filters) {
            // ÌïÑÌÑ∞ Ï†ïÍ∑úÌôî
            const normalizedFilters = {};
            
            // yearÎäî Ïà´ÏûêÎ°ú Î≥ÄÌôò
            if ('year' in filters) {
                normalizedFilters.year = Number(filters.year) || 1;
            }
            
            // semesterÎäî Ïú†Ìö®Ìïú Í∞íÎßå ÌóàÏö©
            if ('semester' in filters && ['spring', 'summer', 'fall', 'winter'].includes(filters.semester)) {
                normalizedFilters.semester = filters.semester;
            }
            
            // levelÍ≥º groupLevelÏùÄ Î¨∏ÏûêÏó¥Ïù¥ ÏûàÏùÑ ÎïåÎßå ÏÑ§Ï†ï
            if ('level' in filters && filters.level) {
                normalizedFilters.level = String(filters.level);
            }
            if ('groupLevel' in filters && filters.groupLevel) {
                normalizedFilters.groupLevel = String(filters.groupLevel);
            }

            this.filters = { ...this.filters, ...normalizedFilters };
            console.log('üéØ ÌïÑÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏:', this.filters);
        },

        setDateRange(range) {
            // ÎÇ†Ïßú Ï†ïÍ∑úÌôî
            const start = range.start ? dayjs(range.start).format('YYYY-MM-DD') : null;
            const end = range.end ? dayjs(range.end).format('YYYY-MM-DD') : null;

            if (start && end) {
                this.dateRange = { start, end };
                console.log('üìÖ ÎÇ†Ïßú Î≤îÏúÑ ÏóÖÎç∞Ïù¥Ìä∏:', this.dateRange);
            } else {
                console.warn('‚ùå Invalid date range:', range);
            }
        },

        async loadAllDataBySemester(params = null) {
            try {
                // ÌïÑÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏
                if (params) {
                    this.setFilters(params);
                }

                // Î™®Îì† Î∞∞Ïó¥ Ï¥àÍ∏∞Ìôî
                this.regulars = [];
                this.specials = [];
                this.cancels = [];
                this.makeups = [];
                this.events = [];
                this.holidays = [];

                const semesterRange = getSemesterRange(this.filters.year, this.filters.semester)


                // Îç∞Ïù¥ÌÑ∞ Î°úÎìú
                const data = await fetchTimetableWithEvents({
                    year: this.filters.year,
                    semester: this.filters.semester,
                    level: this.filters.level,
                    group_level: this.filters.groupLevel,
                    start_date: this.dateRange.start,
                    end_date: this.dateRange.end,
                    type: 'all'
                });

                // Ï†ïÍ∑ú ÏàòÏóÖ: ÌïôÎÖÑ Í∏∞Ï§ÄÏúºÎ°ú ÌïÑÌÑ∞ÎßÅ
                this.regulars = data.filter(item => 
                    item.event_type === 'regular' && !item.isCancelled
                ).map(t => ({
                    ...t,
                    year: t.year || this.filters.year,  // Î™ÖÏãúÏ†ÅÏúºÎ°ú year ÏÑ§Ï†ï
                    level: t.level || this.filters.level
                }));

                // Ìú¥Í∞ï: Ï†ïÍ∑úÏàòÏóÖÏùò Ìú¥Í∞ï + Ìú¥Í∞ï Ïù¥Î≤§Ìä∏
                this.cancels = [
                    ...data.filter(item => item.event_type === 'regular' && item.isCancelled),
                    ...data.filter(item => item.event_type === 'cancel')
                ].map(t => ({
                    ...t,
                    event_type: 'cancel',
                    description: t.description || 'Ìú¥Í∞ï',
                    year: t.year || this.filters.year,
                    level: t.level || this.filters.level,
                    date: t.date
                }))

                this.makeups = data.filter(item => 
                    item.event_type === 'makeup'
                ).map(t => ({
                    ...t,
                    year: t.year || this.filters.year,
                    level: t.level || this.filters.level,
                    date: t.date

                }));
                
                this.specials = data.filter(item => 
                    item.event_type === 'special'
                ).map(t => ({
                    ...t,
                    year: t.year || this.filters.year,
                    level: t.level || this.filters.level,
                    date: t.date
                }));
                
                this.events = data.filter(item => 
                    item.event_type === 'event'
                ).map(t => ({
                    ...t,
                    year: t.year || this.filters.year,
                    level: t.level || this.filters.level
                }));
                
                this.holidays = data.filter(item => 
                    item.event_type === 'holiday'
                ).map(t => ({
                    ...t,
                    year: t.year || this.filters.year,
                    level: t.level || this.filters.level
                }));

            } catch (error) {
                console.error('‚ùå loadAllDataBySemester failed:', error);
                throw error;
            }
        },

        resetAll() {
            this.regulars = []
            this.specials = []
            this.cancels = []
            this.makeups = []
            this.events = []
            this.holidays = []
            this.filters = {
                year: 1,
                semester: 'spring',
                level: null,
                groupLevel: null
            }
            this.dateRange = {
                start: dayjs().startOf('week').format('YYYY-MM-DD'),
                end: dayjs().startOf('week').add(6, 'day').format('YYYY-MM-DD')
            }
        }
    }
})
