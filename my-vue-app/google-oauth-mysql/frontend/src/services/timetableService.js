// services/timetableService.js -------------------------------------------------
// Î∞±ÏóîÎìú ÎùºÏö∞ÌåÖ Íµ¨Ï°∞(Î¶¨Ìå©ÌÑ∞ÎßÅÎêú TimetableController)Ïóê ÎßûÏ∂∞ Ï†ÑÏ≤¥ API ÎûòÌçºÎ•º Ïû¨Ï†ïÎπÑÌñàÎã§.
// Ï£ºÏöî Î≥ÄÍ≤Ω ÏÇ¨Ìï≠
//   1. ÏóîÎìúÌè¨Ïù∏Ìä∏ ÏÉÅÏàòÌôî ‚Üí Ìïú Í≥≥ÏóêÏÑú Í≤ΩÎ°ú Í¥ÄÎ¶¨.
//   2. ÎÇ†Ïßú Î≤îÏúÑ(resolveDateRange) Ïú†Ìã∏ ‚Üí start_date¬∑end_dateÍ∞Ä ÏóÜÏúºÎ©¥ ÌïôÍ∏∞ Î≤îÏúÑ ÏûêÎèô Í≥ÑÏÇ∞.
//   3. fetchTimetableWithEvents ‚Üí /timetable-with-events Î°ú Í≤ΩÎ°ú ÌÜµÏùº, group_level¬∑type ÌååÎùºÎØ∏ÌÑ∞ Ï∂îÍ∞Ä.
//   4. fetchSpecialLectures ‚Üí /special-lectures Î°ú Í≤ΩÎ°ú ÌÜµÏùº.
//   5. fetchTimetables ‚Üí Ï†ïÍ∑ú ÏàòÏóÖ Ï†ÑÏö©, level ÌååÎùºÎØ∏ÌÑ∞ Ï†úÍ±∞(Î∞±ÏóîÎìúÏóêÏÑú Î¨¥ÏãúÌïòÎØÄÎ°ú).
//   6. CRUD Ìï®ÏàòÎäî ENDPOINTS.timetables Í∏∞Î∞òÏúºÎ°ú Í≤ΩÎ°ú ÏùºÏõêÌôî.
// ---------------------------------------------------------------------------

import apiClient from "@/services/apiClient.js";
import { getSemesterRange } from "@/utils/semester";
import { normalizeLevel } from "@/utils/level";

/**
 * üìå ÏóîÎìúÌè¨Ïù∏Ìä∏ Îßµ ‚Äì ÎùºÏö∞Ìä∏Í∞Ä Î∞îÎÄåÎ©¥ Ïó¨Í∏∞Îßå ÏàòÏ†ïÌïòÎ©¥ Îê®.
 */
const ENDPOINTS = {
    timetableWithEvents: "/timetables/full",
    specialLectures:     "/timetables/special",
    timetables:          "/timetables"                // Ï†ïÍ∑ú ÏàòÏóÖ CRUD
};

/**
 * üóìÔ∏è start_date / end_date Í∞Ä ÏóÜÏúºÎ©¥ ÌïôÍ∏∞ Î≤îÏúÑÎ•º Í≥ÑÏÇ∞Ìï¥ Î∞òÌôòÌïúÎã§.
 */
function resolveDateRange(year, semester, start_date, end_date) {
    if (start_date && end_date) return { start_date, end_date };
    return getSemesterRange(year, semester);
}

// ---------------------------------------------------------------------------
// 1) Ï†ïÍ∑ú + ÌäπÍ∞ï + Ïù¥Î≤§Ìä∏ + Í≥µÌú¥Ïùº ÌÜµÌï© Ï°∞Ìöå
// ---------------------------------------------------------------------------

/**
 * @param {Object} options
 *   @property {number}  year
 *   @property {string}  semester  ‚Äì 'spring' | 'summer' | 'fall' | 'winter'
 *   @property {string}  level
 *   @property {string}  [group_level='A']
 *   @property {string}  [start_date]
 *   @property {string}  [end_date]
 *   @property {string}  [type='all']     ‚Äì 'regular' | 'special' | 'all'
 */
export const fetchTimetableWithEvents = async ({
                                                   year,
                                                   semester,
                                                   level,
                                                   group_level = "A",
                                                   start_date,
                                                   end_date,
                                                   type = "all"
                                               }) => {
    const { start_date: s, end_date: e } = resolveDateRange(year, semester, start_date, end_date);
    const normalizedLevel = normalizeLevel(level);

    const params = {
        year,
        semester,
        level: normalizedLevel,
        group_level,
        start_date: s,
        end_date: e,
        type
    };

    console.log("üì° [fetchTimetableWithEvents]", params);

    try {
        const { data } = await apiClient.get(ENDPOINTS.timetableWithEvents, { params });
        return {
            timetables: data?.timetables || [],
            events:     data?.events     || [],
            holidays:   data?.holidays   || []
        };
    } catch (err) {
        console.error("‚ùå fetchTimetableWithEvents failed:", err);
        return { timetables: [], events: [], holidays: [] };
    }
};

// ---------------------------------------------------------------------------
// 2) ÌäπÍ∞ï Ï†ÑÏö© Ï°∞Ìöå
// ---------------------------------------------------------------------------

export const fetchSpecialLectures = async ({
                                               year,
                                               semester,
                                               level,
                                               group_level = "A",
                                               start_date,
                                               end_date
                                           }) => {
    const { start_date: s, end_date: e } = resolveDateRange(year, semester, start_date, end_date);
    const normalizedLevel = normalizeLevel(level);

    const params = { semester, level: normalizedLevel, group_level, start_date: s, end_date: e };
    console.log("üì° [fetchSpecialLectures]", params);

    try {
        const { data } = await apiClient.get(ENDPOINTS.specialLectures, { params });
        return data;
    } catch (err) {
        console.error("‚ùå fetchSpecialLectures failed:", err);
        return [];
    }
};

// ---------------------------------------------------------------------------
// 3) Ï†ïÍ∑ú ÏàòÏóÖ Ï†ÑÏö© Ï°∞Ìöå
// ---------------------------------------------------------------------------

export const fetchTimetables = async ({ year, semester }) => {
    try {
        const { data } = await apiClient.get(ENDPOINTS.timetables, { params: { year, semester } });
        return data?.timetables || [];
    } catch (err) {
        console.error("‚ùå fetchTimetables failed:", err);
        return [];
    }
};

// ---------------------------------------------------------------------------
// 4) CRUD ‚Äì Ï†ïÍ∑ú¬∑ÌäπÍ∞ï Î™®Îëê ÏÇ¨Ïö©
// ---------------------------------------------------------------------------

export const createTimetable = async timetableData => {
    try {
        const { data } = await apiClient.post(ENDPOINTS.timetables, timetableData);
        console.log("üì° createTimetable", timetableData);
        return data;
    } catch (err) {
        console.error("‚ùå createTimetable failed:", err);
        throw err;
    }
};

export const updateTimetable = async (id, timetableData) => {
    try {
        const { data } = await apiClient.put(`${ENDPOINTS.timetables}/${id}`, timetableData);
        return data;
    } catch (err) {
        console.error("‚ùå updateTimetable failed:", err);
        throw err;
    }
};

export const deleteTimetable = async id => {
    try {
        const { data } = await apiClient.delete(`${ENDPOINTS.timetables}/${id}`);
        return data;
    } catch (err) {
        console.error("‚ùå deleteTimetable failed:", err);
        throw err;
    }
};
